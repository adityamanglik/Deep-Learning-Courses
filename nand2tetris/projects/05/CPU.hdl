// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //ALU/////////////////////////////////////////////////////////////////////////////////////////////////
    // A vs M value select MUX
    Mux16(a=AROut, b=inM, sel=instruction[12], out=ALUOp1);
    ALU(x=DROut, y=ALUOp1, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=ALUZeroout, ng=ALUNegout);
    //ALU/////////////////////////////////////////////////////////////////////////////////////////////////

    //ADDRESS REGISTER/////////////////////////////////////////////////////////////////////////////////////////////////
    // MUX to update address value from ALU
    Mux16(a=AROut, b=ALUout, sel=instruction[5], out=ARMuxOut);
    // MUX to distinguish A vs C instruction --> A Takes precedence over C instruction
    Mux16(a=instruction, b=ARMuxOut, sel=instruction[15], out=ARMuxOut1);
    // address register
    ARegister(in=ARMuxOut1, load=true, out=AROut); // TODO: Load asserted to 1, check
    //ADDRESS REGISTER/////////////////////////////////////////////////////////////////////////////////////////////////
    
    //OUTPUT SIGNALS/////////////////////////////////////////////////////////////////////////////////////////////////
    // [ADDRESS] memory address signal output
    // And16(a=AROut, b[0..15]=, out=memoryaddress[0..14]);
    And15(a=AROut, b[0..14]= true, out=addressM);

    // [CONTROL] write to memory
    And(a=instruction[3], b=instruction[15], out=writeM);

    // [DATA] write to memory
    And16(a=ALUout, b[0..15]=true, out=outM);
    //OUTPUT SIGNALS/////////////////////////////////////////////////////////////////////////////////////////////////

    //DATA REGISTER/////////////////////////////////////////////////////////////////////////////////////////////////
    // MUX to update value from ALU
    // update value only for C-instructions
    And(a=instruction[4], b=instruction[15], out=updateDR);
    Mux16(a=DROut, b=ALUout, sel=updateDR, out=DRMuxout);
    // data register
    DRegister(in=DRMuxout, load=true, out=DROut);
    //DATA REGISTER/////////////////////////////////////////////////////////////////////////////////////////////////

    //PC/////////////////////////////////////////////////////////////////////////////////////////////////
    //load is asserted when we perform a jump
    Not(in=ALUZeroout, out=NegALUZeroout);
    Not(in=ALUNegout, out=NegALUNegout);
    //JGT
    And4Way(a = true, b = instruction[0], c = NegALUZeroout, d = NegALUNegout, out=JGTFlag);
    //JEQ
    And4Way(a = true, b = instruction[1], c = ALUZeroout, d = NegALUNegout, out=JEQFlag); // TODO: Check
    //JGE
    And4Way(a = instruction[0], b = instruction[1], c = JGTFlag, d = JEQFlag, out=JGEFlag);
    //JLT
    And4Way(a = true, b = instruction[2], c = NegALUZeroout, d = ALUNegout, out=JLTFlag);
    //JLE
    And4Way(a = instruction[2], b = instruction[1], c = JLTFlag, d = JEQFlag, out=JLEFlag);
    //JNE
    And4Way(a = instruction[2], b = instruction[0], c = NegALUZeroout, d = true, out=JNEFlag); // TODO: Check
    //JMP
    And4Way(a = instruction[0], b = instruction[1], c = instruction[2], d = true, out=JMPFlag);
    //join all flags
    Or(a=JGTFlag, b=JEQFlag, out=PCload1);
    Or(a=PCload1, b=JGEFlag, out=PCload2);
    Or(a=PCload2, b=JLTFlag, out=PCload3);
    Or(a=PCload3, b=JLEFlag, out=PCload4);
    Or(a=PCload4, b=JNEFlag, out=PCload5);
    Or(a=PCload5, b=JMPFlag, out=PCload6);
    And(a=PCload6, b=instruction[15], out=PCload7); //PC is loaded only for C instructions
    PC(in=AROut, load=PCload7, inc=true, reset=reset, out=pcout); // increment is true by default
    And15(a=pcout, b[0..14]=true, out=pc);
    //PC/////////////////////////////////////////////////////////////////////////////////////////////////

}